#pragma kernel CheckClosest
#define NR_THREADS 64


struct Out{
  float3 closest;
  float  id;
  float3 pos;
  float  distance;
};

// want to use about 1-2k per 64 threads
groupshared Out accumVal[NR_THREADS];
groupshared Out interlockedFullValue;

struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 lockPosition;
    float2 uv;
    float2 offset;
    float  whichTextureType;
    float  extraScale;
    float  hueExtra;
    float  special;
};


RWStructuredBuffer<Vert> _VertBuffer;
uint _VertBuffer_COUNT;



RWStructuredBuffer<Out> _OutBuffer;
uint _OutBuffer_COUNT;

float3 _RO;
float3 _RD;
#include "../Chunks/safeID.cginc"



void interlockedClosestLength( Out value   , int threadid ){


  GroupMemoryBarrierWithGroupSync();
  accumVal[threadid] = value;

  // accumulate a bit in parralel
  GroupMemoryBarrierWithGroupSync();
  if((threadid%4)==0){

    Out fOut;
    fOut.closest = 100000;
    fOut.id = -1;
    fOut.pos = 0;
    fOut.distance = 100000;

    for( int i = 0; i < 4; i++){
      Out v = accumVal[threadid + i ];
      if( length(v.closest) > 0 && length(v.closest) < length(fOut.closest) ){
        fOut = v;
      }
    }
    accumVal[threadid+0] = fOut;

  }

  GroupMemoryBarrierWithGroupSync();
  if(threadid==0){
    Out fOut = accumVal[0];

    for(int i=4; i<NR_THREADS; i+=4){
      Out v = accumVal[i];

      if(length(v.closest) > 0 && length(v.closest) < length(fOut.closest) ){
         fOut = v;
      }

    }
    interlockedFullValue = fOut;
  }

  GroupMemoryBarrierWithGroupSync();

}



float3 VecToRay( float3 pos ){
  
  float3 p2 = _RO - _RD * 200;
  float3 pa = pos - _RO;
  float3 ba = _RO - p2;
  float h =  dot(pa,ba)/dot(ba,ba);
  float3 pOnLine = h * _RD* 200 +_RO;

  if( h  <= 0 ){
    pOnLine = float3(10000,10000,10000);
  }

  float3 inLine = pos - pOnLine;

  return  inLine;//normalize(inLine) * force *  (1 - clamp( length(inLine) / radius , 0 , 1));
}


[numthreads(NR_THREADS,1,1)]
void CheckClosest(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = safeID( threadID + u3GroupID.x * NR_THREADS , _VertBuffer_COUNT );

  Vert v = _VertBuffer[pID];

  float3 v2r = VecToRay( v.pos );

  Out val;
  val.closest = v2r;
  val.id = float(pID);
  val.pos = v.pos;
  val.distance = length( v.pos - _RO );

  interlockedClosestLength( val ,threadID );

  if( threadID == 0 ){
    _OutBuffer[ u3GroupID.x ] = interlockedFullValue;
  }

}
