  
#pragma kernel SetGlyph
#pragma kernel SetAnchor
#pragma kernel SetPage
#pragma kernel SetPageAtEmitPos
#pragma kernel SetPageAtCamera
#pragma kernel SetPageAtPlayer
#pragma kernel SimulationTest 
#pragma kernel SimulationBasic 
#pragma kernel Transfer 

struct TransferVert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 lockPosition;
    float2 uv;
    float2 offset;
    float  whichTextureType;
    float  extraScale;
    float  hueExtra;
    float  special;
};

struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 lockPosition;
    float2 uv;
    float2 offset;
    float4 debug;
};


struct Anchor{
    float3 pos;
    float3 nor;
    float2 position;
    float2 dimensions;
    float2 offset;
    float2 location;
    float2 scaledDimensions;
    float  whichTextureType;
    float  extraScale;
    float  hueExtra;
    float  special;
};


RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<TransferVert> _TransferBuffer;
RWStructuredBuffer<Anchor> _AnchorBuffer;

int _VertBuffer_COUNT;
int _AnchorBuffer_COUNT;
int _TransferBuffer_COUNT;


#include "../Chunks/safeID.cginc"
#include "../Chunks/nanCheckVert.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/curlNoise.cginc"
#include "../Chunks/hash.cginc"


float3 _CameraUp;
float3 _CameraPosition;
float3 _CameraLeft;
float3 _CameraRight;
float _Radius;
float _Scale;
float _Time;

float3 _RayOrigin;
float3 _RayDirection;

float _FontWidth;
float _FontHeight;
float _FontSize;



#include "../Chunks/GetRayForce.cginc"

float3 _PlayerPosition;
float3 _PlayerSoul;
float3 _UrsulaPos;
float3 _Up;

float _PageAlive;

int _BaseID;
int _TipID;

int GetID( int id ){
  return (id + _BaseID) % _VertBuffer_COUNT;
}

bool inCurrent( int id ){

  if( GetID( id ) < _BaseID || GetID( id ) > _TipID ){
    return false;
  }else{
    return true;
  }
}


bool isInside( int id){
    // Getting our ID and if we are currently locked or not
    int dif = _TipID - _BaseID;

    int inBase = _BaseID % _VertBuffer_COUNT;

    int newID = id;

    if( inBase + dif > _VertBuffer_COUNT ){
      if( newID < inBase ){ newID += _VertBuffer_COUNT; }
    }

    return (newID >= inBase && newID < inBase + dif);

}


float3 getProj( float3 pos , float3 sp , float3 ep ){
  float3 dif = sp-ep;
  float dot1 = dot( pos-sp , normalize(dif));

  float3 proj = normalize(dif) * dot1;
  float dotProj = dot( proj, ep-sp);
  
  float3 lineToPoint = pos-sp-proj;

  return lineToPoint;
}


float3 CurlForce( float3 v , float3 rO , float3 rD ){


  float3 toLine = getProj( v , rO , rO + rD );

  float3 curl = cross( toLine , rD );

  return curl; 

} 


float _Active;

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void SetGlyph(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID/4;

    int realPID = GetID( particleID );
    int sID = safeID(realPID*4 + pID%4,_TransferBuffer_COUNT);
    
    TransferVert v = _TransferBuffer[ sID ];


      if( isInside(realPID) ){

        int safe = safeID(realPID,_VertBuffer_COUNT); 
        Vert v = _VertBuffer[safe];

        v.debug.x = _Time;
        v.debug.y = 1;

        _VertBuffer[safe] = v;

      }

    if( particleID < _AnchorBuffer_COUNT ){

      Anchor p = _AnchorBuffer[safeID(particleID,_AnchorBuffer_COUNT)];

    

      int idInParticle = pID % 4;
      int row = idInParticle / 2;
      int col = pID % 2;

      float3 u = -normalize(cross(p.nor,float3(0,1,0)));
      float3 l = normalize(cross(p.nor,u));

      float3 l1 =l* (float(col)-.5);
      float3 u1 =u* (float(row)-.5);

      //float glyphWidth = 80.5 / 1024.;
      //float glyphHeight = 145. / 1024.;
      //float glyphBelow =   29. / 1024.;
      //float totalSize = glyphHeight;
      

      float2 fOffset = float2(0,0);

      //fPos

      fOffset.x =  -0*p.offset.x + float(row) * p.dimensions.x;//(float(row) )* p.dimensions.x/_FontSize //p.offset.x/_FontSize * .5;
      fOffset.y = -p.offset.y +  float(col) * p.dimensions.y;//(float(row) )* p.dimensions.x/_FontSize //p.offset.x/_FontSize * .5;
      
      fOffset -= float2( p.dimensions.x/2 , -p.dimensions.x/2 );//p.offset.x;
      fOffset /= _FontSize;
      //fOffset.y += (float(col) )* p.dimensions.y/_FontSize //+p.offset.y/_FontSize * .5;

      //fOffset.y +=  _Scale * p.dimensions.y / _FontHeight;
          //fOffset.y -= .1*p.offset.y / _FontWidth;
      //fOffset.y -=  p.dimensions.y * .5;

      //fOffset.y += 1 * p.offset.y * .5;

      //fOffset /= _FontSize ;
      //fOffset *= .05f;
      //fOffset.x -= 1 * p.offset.x;

//fOffset *= float2(1 , 1/hmmm );


     // fOffset.x += 1 * p.offset.x;
//fOffset *= 2;



      float2 fUV = float2( float(row) , 1-float(col) );

      float x = (fUV.x * p.dimensions.x/ _FontWidth)  + (p.position.x/ _FontWidth) ;
      float y = (fUV.y * p.dimensions.y/ _FontHeight) + (1-(p.position.y/ _FontHeight))-p.dimensions.y/ _FontHeight;// - p.scaledDimensions.y;

      fUV = float2(x,y);

      //fUV = float2(p.dimensions.x , p.dimensions.y);
      //fUV *= .1;

      v.uv = fUV;
      v.offset = fOffset * float2(1,-1) * _Radius * _Scale;///_FontWidth;
      v.nor = float3(0,0,1);//p.nor;
      v.extraScale = p.extraScale;
      v.whichTextureType = p.whichTextureType;
      v.hueExtra = p.hueExtra;
      v.special = p.special;
    
    }else{
    
      v.uv = float2(0,0);
      v.offset = float2(0,0);
      v.nor = float3(0,0,1);
    
    }

    _TransferBuffer[sID] = v;

}


float3 _FrameTopLeft;
float3 _FrameRight;
float3 _FrameUp;
float _FrameWidth;
float _FrameHeight;

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void SetAnchor(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    // The vert we are setting needs to be cycled
    // but the anchor should just be the pID
    int sID =safeID(GetID(pID),_VertBuffer_COUNT);

    Vert v = _VertBuffer[sID];

    if(pID <= _AnchorBuffer_COUNT ){

      //scaledCharacterSize * (float)Arial.info[c][6] / (float)Arial.size;
    
      Anchor p = _AnchorBuffer[safeID(pID,_AnchorBuffer_COUNT)];
      v.lockPosition = _FrameTopLeft + ( p.location.x - _Scale*_Radius*(p.offset.x /_FontSize)) * _FrameRight - p.location.y * _FrameUp;//p.pos;

    }else{
     // v.lockPosition = _UrsulaPos;
    }

    _VertBuffer[sID] = v;

}


float3 randDir( float l ){

  return float3((2*hash(l * 123.)-1),
                (2*hash(l * 226.)-1),
                (2*hash(l * 317.)-1));
}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void SetPage(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;
    int sID =safeID(GetID(pID),_VertBuffer_COUNT);
    Vert v = _VertBuffer[sID];
    
    float3 d = v.pos - _UrsulaPos;
    float l = length(d);

    if(l > 2 ){
      v.pos = _UrsulaPos;// + randDir(float(pID)) * .4;
      v.vel = randDir(float(pID)) * .01;//float3(0,0,0);
    }

   // _VertBuffer[sID] = v;

}


float3 _EmitPos;

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void SetPageAtEmitPos(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;
    int sID =safeID(GetID(pID),_VertBuffer_COUNT);
    Vert v = _VertBuffer[sID];
    

    // Need to make sure that its not bigger than anchor count
    // so doesn't accidently set another letter
    if(pID <= _AnchorBuffer_COUNT ){ v.pos = _EmitPos; }

    _VertBuffer[sID] = v;

}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void SetPageAtCamera(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;
    int sID =safeID(GetID(pID),_VertBuffer_COUNT);
    Vert v = _VertBuffer[sID];
    

    // Need to make sure that its not bigger than anchor count
    // so doesn't accidently set another letter
    if(pID <= _AnchorBuffer_COUNT ){ v.pos = _CameraPosition; }

    _VertBuffer[sID] = v;

}




#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void SetPageAtPlayer(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;
    int sID =safeID(GetID(pID),_VertBuffer_COUNT);
    Vert v = _VertBuffer[sID];
    

    // Need to make sure that its not bigger than anchor count
    // so doesn't accidently set another letter
    if(pID <= _AnchorBuffer_COUNT ){ v.pos = _PlayerSoul; }

    _VertBuffer[sID] = v;

}


float sdCapsule( float3 p, float3 a, float3 b, float r )
{
    float3 pa = p - a, ba = b - a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
    return length( pa - ba*h ) - r;
}





#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void SimulationTest(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;
    int sID =safeID(pID,_VertBuffer_COUNT);
    Vert v = _VertBuffer[sID];
    TransferVert tv = _TransferBuffer[safeID(pID*4,_TransferBuffer_COUNT)];

    float3 force = 0;

    // Getting our ID and if we are currently locked or not
    int dif = _TipID - _BaseID;


    bool inside = isInside(pID);

    if( inside ){

      float t = _Time - v.debug.x;

      force += -min((v.pos - v.lockPosition),1000) * .01;

      //force += curlNoise( v.pos * .4 ) * .002 * min( pow((v.pos - v.lockPosition),4),3)/(t*t*.4+1);
      //force += GetRayForce( v.pos , -.004 , 5 * length( tv.offset) );

    }else{
     
      force += curlNoise( v.pos * .3 ) * .002;
      v.debug.y -= .005;

    }

  if( length( force ) > 1 ){ force = normalize(force) * 1; }
    //}
    //}else{
    //  force += float3(0,1,0) * .01;
    //}
    v.vel  += force * (hash((float)pID) * .6+ .4);


  if( length( v.vel ) > 1 ){ v.vel = normalize(v.vel) * 1; }
    v.pos += v.vel;
    v.vel *= .8;

    nanCheck(v);
    //v.pos = v.lockPosition;
    _VertBuffer[sID] = v;
}



#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void SimulationBasic(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;
    int sID =safeID(GetID(pID),_VertBuffer_COUNT);
    Vert v = _VertBuffer[sID];


   
    v.pos = v.lockPosition;


    _VertBuffer[sID] = v;

}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transfer(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;
    int sID =safeID(GetID(pID/4)*4 + pID%4,_TransferBuffer_COUNT);

    TransferVert v = _TransferBuffer[sID];

    int particleID = GetID(pID/4);

    Vert p = _VertBuffer[safeID(particleID,_VertBuffer_COUNT)];



    float radiusMultiplier = 1;

    bool inside = isInside( particleID );

    if( !inside){
      radiusMultiplier = max(p.debug.y,0); //1/((_Time - p.debug.x) + 1);
    }

    //radiusMultiplier = 1;


    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 u = _CameraUp ;
    float3 l = -_CameraRight;//normalize(cross(float3(0,0,1),u));

    //l = l* (float(col)-.5);
    //u = u* (float(row)-.5);

    //u = float3(0,1,0);
    //l = float3(1,0,0);

    float3 fPos = p.pos + ((u*v.offset.y) + (-l*v.offset.x)) * radiusMultiplier * v.extraScale;//*_Radius*_Scale;
    //float3 fPos = p.pos + ((l) + (u))*_Radius*_Scale;

    v.pos = fPos;
    v.vel = p.vel;
    //v.uv = v.uv;
    //v.nor = p.nor;

    _TransferBuffer[sID] = v;

}
